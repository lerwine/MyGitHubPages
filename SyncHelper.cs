using System;
using System.Collections;
using System.Threading;

namespace MyGitHubPages
{
    public static partial class SyncHelper
    {
        /// <summary>
        /// Invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T16">The type of the sixteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <param name="arg16">The sixteenth parameter to pass to the delegate method.</param>
        /// <returns>The value returned by the delegate method.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static TResult GetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(this ICollection target, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) { return GetSync(target, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16)); }
        /// <summary>
        /// Invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <returns>The value returned by the delegate method.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static TResult GetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(this ICollection target, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) { return GetSync(target, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)); }
        /// <summary>
        /// Invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <returns>The value returned by the delegate method.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static TResult GetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(this ICollection target, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) { return GetSync(target, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)); }
        /// <summary>
        /// Invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <returns>The value returned by the delegate method.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static TResult GetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(this ICollection target, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) { return GetSync(target, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)); }
        /// <summary>
        /// Invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <returns>The value returned by the delegate method.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static TResult GetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(this ICollection target, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) { return GetSync(target, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)); }
        /// <summary>
        /// Invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <returns>The value returned by the delegate method.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static TResult GetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(this ICollection target, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) { return GetSync(target, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)); }
        /// <summary>
        /// Invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <returns>The value returned by the delegate method.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static TResult GetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(this ICollection target, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) { return GetSync(target, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)); }
        /// <summary>
        /// Invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <returns>The value returned by the delegate method.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static TResult GetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this ICollection target, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) { return GetSync(target, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)); }
        /// <summary>
        /// Invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <returns>The value returned by the delegate method.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static TResult GetSync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this ICollection target, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) { return GetSync(target, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)); }
        /// <summary>
        /// Invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <returns>The value returned by the delegate method.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static TResult GetSync<T1, T2, T3, T4, T5, T6, T7, TResult>(this ICollection target, Func<T1, T2, T3, T4, T5, T6, T7, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) { return GetSync(target, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }
        /// <summary>
        /// Invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <returns>The value returned by the delegate method.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static TResult GetSync<T1, T2, T3, T4, T5, T6, TResult>(this ICollection target, Func<T1, T2, T3, T4, T5, T6, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) { return GetSync(target, () => func(arg1, arg2, arg3, arg4, arg5, arg6)); }
        /// <summary>
        /// Invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <returns>The value returned by the delegate method.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static TResult GetSync<T1, T2, T3, T4, T5, TResult>(this ICollection target, Func<T1, T2, T3, T4, T5, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) { return GetSync(target, () => func(arg1, arg2, arg3, arg4, arg5)); }
        /// <summary>
        /// Invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <returns>The value returned by the delegate method.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static TResult GetSync<T1, T2, T3, T4, TResult>(this ICollection target, Func<T1, T2, T3, T4, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4) { return GetSync(target, () => func(arg1, arg2, arg3, arg4)); }
        /// <summary>
        /// Invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <returns>The value returned by the delegate method.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static TResult GetSync<T1, T2, T3, TResult>(this ICollection target, Func<T1, T2, T3, TResult> func, T1 arg1, T2 arg2, T3 arg3) { return GetSync(target, () => func(arg1, arg2, arg3)); }
        /// <summary>
        /// Invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <returns>The value returned by the delegate method.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static TResult GetSync<T1, T2, TResult>(this ICollection target, Func<T1, T2, TResult> func, T1 arg1, T2 arg2) { return GetSync(target, () => func(arg1, arg2)); }
        /// <summary>
        /// Invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T">The type of parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg">The parameter to pass to the delegate method.</typepparamaram>
        /// <returns>The value returned by the delegate method.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static TResult GetSync<T, TResult>(this ICollection target, Func<T, TResult> func, T arg) { return GetSync(target, () => func(arg)); }
        /// <summary>
        /// Invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <returns>The value returned by the delegate method.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static TResult GetSync<TResult>(this ICollection target, Func<TResult> func)
        {
            if (target == null)
                return func();
            object syncRoot;
            if (!target.IsSynchronized || (syncRoot = target.SyncRoot) == null)
                syncRoot = target;
            Monitor.Enter(syncRoot);
            try { return func(); } finally { Monitor.Exit(syncRoot); }
        }
        /// <summary>
        /// Invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T16">The type of the sixteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <param name="arg16">The sixteenth parameter to pass to the delegate method.</param>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static void InvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this ICollection target, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) { InvokeSync(target, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16)); }
        /// <summary>
        /// Invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static void InvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this ICollection target, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) { InvokeSync(target, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)); }
        /// <summary>
        /// Invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static void InvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this ICollection target, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) { InvokeSync(target, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)); }
        /// <summary>
        /// Invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static void InvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this ICollection target, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) { InvokeSync(target, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)); }
        /// <summary>
        /// Invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static void InvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this ICollection target, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) { InvokeSync(target, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)); }
        /// <summary>
        /// Invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static void InvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this ICollection target, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) { InvokeSync(target, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)); }
        /// <summary>
        /// Invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static void InvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this ICollection target, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) { InvokeSync(target, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)); }
        /// <summary>
        /// Invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static void InvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this ICollection target, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) { InvokeSync(target, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)); }
        /// <summary>
        /// Invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static void InvokeSync<T1, T2, T3, T4, T5, T6, T7, T8>(this ICollection target, Action<T1, T2, T3, T4, T5, T6, T7, T8> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) { InvokeSync(target, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)); }
        /// <summary>
        /// Invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static void InvokeSync<T1, T2, T3, T4, T5, T6, T7>(this ICollection target, Action<T1, T2, T3, T4, T5, T6, T7> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) { InvokeSync(target, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }
        /// <summary>
        /// Invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static void InvokeSync<T1, T2, T3, T4, T5, T6>(this ICollection target, Action<T1, T2, T3, T4, T5, T6> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) { InvokeSync(target, () => action(arg1, arg2, arg3, arg4, arg5, arg6)); }
        /// <summary>
        /// Invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static void InvokeSync<T1, T2, T3, T4, T5>(this ICollection target, Action<T1, T2, T3, T4, T5> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) { InvokeSync(target, () => action(arg1, arg2, arg3, arg4, arg5)); }
        /// <summary>
        /// Invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static void InvokeSync<T1, T2, T3, T4>(this ICollection target, Action<T1, T2, T3, T4> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4) { InvokeSync(target, () => action(arg1, arg2, arg3, arg4)); }
        /// <summary>
        /// Invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static void InvokeSync<T1, T2, T3>(this ICollection target, Action<T1, T2, T3> action, T1 arg1, T2 arg2, T3 arg3) { InvokeSync(target, () => action(arg1, arg2, arg3)); }
        /// <summary>
        /// Invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static void InvokeSync<T1, T2>(this ICollection target, Action<T1, T2> action, T1 arg1, T2 arg2) { InvokeSync(target, () => action(arg1, arg2)); }
        /// <summary>
        /// Invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T">The type of parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg">The parameter to pass to the delegate method.</typepparamaram>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static void InvokeSync<T>(this ICollection target, Action<T> action, T arg) { InvokeSync(target, () => action(arg)); }
        /// <summary>
        /// Invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static void InvokeSync(this ICollection target, Action action)
        {
            if (target == null)
                action();
            else
            {
                object syncRoot;
                if (!target.IsSynchronized || (syncRoot = target.SyncRoot) == null)
                    syncRoot = target;
                Monitor.Enter(syncRoot);
                try { action(); } finally { Monitor.Exit(syncRoot); }
            }
        }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T16">The type of the sixteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <param name="arg16">The sixteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(this ICollection target, int millisecondsTimeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, out TResult result) { return TryGetSync(target, millisecondsTimeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T16">The type of the sixteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <param name="arg16">The sixteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(this ICollection target, TimeSpan timeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, out TResult result) { return TryGetSync(target, timeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T16">The type of the sixteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <param name="arg16">The sixteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(this ICollection target, int millisecondsTimeout, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, out TResult result) { return TryGetSync(target, millisecondsTimeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T16">The type of the sixteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <param name="arg16">The sixteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(this ICollection target, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, out TResult result) { return TryGetSync(target, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T16">The type of the sixteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <param name="arg16">The sixteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(this ICollection target, TimeSpan timeout, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, out TResult result) { return TryGetSync(target, timeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T16">The type of the sixteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <param name="arg16">The sixteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(this ICollection target, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, out TResult result) { return TryGetSync(target, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(this ICollection target, int millisecondsTimeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, out TResult result) { return TryGetSync(target, millisecondsTimeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(this ICollection target, TimeSpan timeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, out TResult result) { return TryGetSync(target, timeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(this ICollection target, int millisecondsTimeout, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, out TResult result) { return TryGetSync(target, millisecondsTimeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(this ICollection target, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, out TResult result) { return TryGetSync(target, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(this ICollection target, TimeSpan timeout, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, out TResult result) { return TryGetSync(target, timeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(this ICollection target, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, out TResult result) { return TryGetSync(target, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(this ICollection target, int millisecondsTimeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, out TResult result) { return TryGetSync(target, millisecondsTimeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(this ICollection target, TimeSpan timeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, out TResult result) { return TryGetSync(target, timeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(this ICollection target, int millisecondsTimeout, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, out TResult result) { return TryGetSync(target, millisecondsTimeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(this ICollection target, TimeSpan timeout, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, out TResult result) { return TryGetSync(target, timeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(this ICollection target, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, out TResult result) { return TryGetSync(target, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(this ICollection target, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, out TResult result) { return TryGetSync(target, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(this ICollection target, int millisecondsTimeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, out TResult result) { return TryGetSync(target, millisecondsTimeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(this ICollection target, TimeSpan timeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, out TResult result) { return TryGetSync(target, timeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(this ICollection target, int millisecondsTimeout, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, out TResult result) { return TryGetSync(target, millisecondsTimeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(this ICollection target, TimeSpan timeout, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, out TResult result) { return TryGetSync(target, timeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(this ICollection target, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, out TResult result) { return TryGetSync(target, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(this ICollection target, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, out TResult result) { return TryGetSync(target, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(this ICollection target, int millisecondsTimeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, out TResult result) { return TryGetSync(target, millisecondsTimeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(this ICollection target, TimeSpan timeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, out TResult result) { return TryGetSync(target, timeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(this ICollection target, int millisecondsTimeout, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, out TResult result) { return TryGetSync(target, millisecondsTimeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(this ICollection target, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, out TResult result) { return TryGetSync(target, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(this ICollection target, TimeSpan timeout, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, out TResult result) { return TryGetSync(target, timeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(this ICollection target, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, out TResult result) { return TryGetSync(target, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(this ICollection target, int millisecondsTimeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, out TResult result) { return TryGetSync(target, millisecondsTimeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(this ICollection target, TimeSpan timeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, out TResult result) { return TryGetSync(target, timeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(this ICollection target, int millisecondsTimeout, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, out TResult result) { return TryGetSync(target, millisecondsTimeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(this ICollection target, TimeSpan timeout, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, out TResult result) { return TryGetSync(target, timeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(this ICollection target, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, out TResult result) { return TryGetSync(target, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(this ICollection target, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, out TResult result) { return TryGetSync(target, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(this ICollection target, int millisecondsTimeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, out TResult result) { return TryGetSync(target, millisecondsTimeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(this ICollection target, TimeSpan timeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, out TResult result) { return TryGetSync(target, timeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(this ICollection target, int millisecondsTimeout, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, out TResult result) { return TryGetSync(target, millisecondsTimeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(this ICollection target, TimeSpan timeout, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, out TResult result) { return TryGetSync(target, timeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(this ICollection target, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, out TResult result) { return TryGetSync(target, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(this ICollection target, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, out TResult result) { return TryGetSync(target, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this ICollection target, int millisecondsTimeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, out TResult result) { return TryGetSync(target, millisecondsTimeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this ICollection target, TimeSpan timeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, out TResult result) { return TryGetSync(target, timeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this ICollection target, int millisecondsTimeout, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, out TResult result) { return TryGetSync(target, millisecondsTimeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this ICollection target, TimeSpan timeout, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, out TResult result) { return TryGetSync(target, timeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this ICollection target, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, out TResult result) { return TryGetSync(target, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this ICollection target, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, out TResult result) { return TryGetSync(target, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this ICollection target, int millisecondsTimeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, out TResult result) { return TryGetSync(target, millisecondsTimeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this ICollection target, TimeSpan timeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, out TResult result) { return TryGetSync(target, timeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this ICollection target, int millisecondsTimeout, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, out TResult result) { return TryGetSync(target, millisecondsTimeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this ICollection target, TimeSpan timeout, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, out TResult result) { return TryGetSync(target, timeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this ICollection target, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, out TResult result) { return TryGetSync(target, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this ICollection target, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, out TResult result) { return TryGetSync(target, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, TResult>(this ICollection target, int millisecondsTimeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, out TResult result) { return TryGetSync(target, millisecondsTimeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, TResult>(this ICollection target, TimeSpan timeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, out TResult result) { return TryGetSync(target, timeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, TResult>(this ICollection target, int millisecondsTimeout, Func<T1, T2, T3, T4, T5, T6, T7, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, out TResult result) { return TryGetSync(target, millisecondsTimeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, TResult>(this ICollection target, TimeSpan timeout, Func<T1, T2, T3, T4, T5, T6, T7, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, out TResult result) { return TryGetSync(target, timeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, TResult>(this ICollection target, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, out TResult result) { return TryGetSync(target, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, TResult>(this ICollection target, Func<T1, T2, T3, T4, T5, T6, T7, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, out TResult result) { return TryGetSync(target, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, TResult>(this ICollection target, int millisecondsTimeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, out TResult result) { return TryGetSync(target, millisecondsTimeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, TResult>(this ICollection target, TimeSpan timeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, out TResult result) { return TryGetSync(target, timeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, TResult>(this ICollection target, int millisecondsTimeout, Func<T1, T2, T3, T4, T5, T6, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, out TResult result) { return TryGetSync(target, millisecondsTimeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, TResult>(this ICollection target, bool requireSync, Func<T1, T2, T3, T4, T5, T6, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, out TResult result) { return TryGetSync(target, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, TResult>(this ICollection target, TimeSpan timeout, Func<T1, T2, T3, T4, T5, T6, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, out TResult result) { return TryGetSync(target, timeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, TResult>(this ICollection target, Func<T1, T2, T3, T4, T5, T6, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, out TResult result) { return TryGetSync(target, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, TResult>(this ICollection target, int millisecondsTimeout, bool requireSync, Func<T1, T2, T3, T4, T5, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, out TResult result) { return TryGetSync(target, millisecondsTimeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, TResult>(this ICollection target, TimeSpan timeout, bool requireSync, Func<T1, T2, T3, T4, T5, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, out TResult result) { return TryGetSync(target, timeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, TResult>(this ICollection target, int millisecondsTimeout, Func<T1, T2, T3, T4, T5, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, out TResult result) { return TryGetSync(target, millisecondsTimeout, false, () => func(arg1, arg2, arg3, arg4, arg5), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, TResult>(this ICollection target, bool requireSync, Func<T1, T2, T3, T4, T5, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, out TResult result) { return TryGetSync(target, requireSync, () => func(arg1, arg2, arg3, arg4, arg5), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, TResult>(this ICollection target, TimeSpan timeout, Func<T1, T2, T3, T4, T5, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, out TResult result) { return TryGetSync(target, timeout, false, () => func(arg1, arg2, arg3, arg4, arg5), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, TResult>(this ICollection target, Func<T1, T2, T3, T4, T5, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, out TResult result) { return TryGetSync(target, false, () => func(arg1, arg2, arg3, arg4, arg5), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, TResult>(this ICollection target, int millisecondsTimeout, bool requireSync, Func<T1, T2, T3, T4, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, out TResult result) { return TryGetSync(target, millisecondsTimeout, requireSync, () => func(arg1, arg2, arg3, arg4), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, TResult>(this ICollection target, TimeSpan timeout, bool requireSync, Func<T1, T2, T3, T4, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, out TResult result) { return TryGetSync(target, timeout, requireSync, () => func(arg1, arg2, arg3, arg4), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, TResult>(this ICollection target, int millisecondsTimeout, Func<T1, T2, T3, T4, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, out TResult result) { return TryGetSync(target, millisecondsTimeout, false, () => func(arg1, arg2, arg3, arg4), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, TResult>(this ICollection target, TimeSpan timeout, Func<T1, T2, T3, T4, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, out TResult result) { return TryGetSync(target, timeout, false, () => func(arg1, arg2, arg3, arg4), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, TResult>(this ICollection target, bool requireSync, Func<T1, T2, T3, T4, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, out TResult result) { return TryGetSync(target, requireSync, () => func(arg1, arg2, arg3, arg4), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, TResult>(this ICollection target, Func<T1, T2, T3, T4, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, out TResult result) { return TryGetSync(target, false, () => func(arg1, arg2, arg3, arg4), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, TResult>(this ICollection target, int millisecondsTimeout, bool requireSync, Func<T1, T2, T3, TResult> func, T1 arg1, T2 arg2, T3 arg3, out TResult result) { return TryGetSync(target, millisecondsTimeout, requireSync, () => func(arg1, arg2, arg3), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, TResult>(this ICollection target, TimeSpan timeout, bool requireSync, Func<T1, T2, T3, TResult> func, T1 arg1, T2 arg2, T3 arg3, out TResult result) { return TryGetSync(target, timeout, requireSync, () => func(arg1, arg2, arg3), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, TResult>(this ICollection target, int millisecondsTimeout, Func<T1, T2, T3, TResult> func, T1 arg1, T2 arg2, T3 arg3, out TResult result) { return TryGetSync(target, millisecondsTimeout, false, () => func(arg1, arg2, arg3), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, T3, TResult>(this ICollection target, bool requireSync, Func<T1, T2, T3, TResult> func, T1 arg1, T2 arg2, T3 arg3, out TResult result) { return TryGetSync(target, requireSync, () => func(arg1, arg2, arg3), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, TResult>(this ICollection target, TimeSpan timeout, Func<T1, T2, T3, TResult> func, T1 arg1, T2 arg2, T3 arg3, out TResult result) { return TryGetSync(target, timeout, false, () => func(arg1, arg2, arg3), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, T3, TResult>(this ICollection target, Func<T1, T2, T3, TResult> func, T1 arg1, T2 arg2, T3 arg3, out TResult result) { return TryGetSync(target, false, () => func(arg1, arg2, arg3), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, TResult>(this ICollection target, int millisecondsTimeout, bool requireSync, Func<T1, T2, TResult> func, T1 arg1, T2 arg2, out TResult result) { return TryGetSync(target, millisecondsTimeout, requireSync, () => func(arg1, arg2), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, TResult>(this ICollection target, TimeSpan timeout, bool requireSync, Func<T1, T2, TResult> func, T1 arg1, T2 arg2, out TResult result) { return TryGetSync(target, timeout, requireSync, () => func(arg1, arg2), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, TResult>(this ICollection target, int millisecondsTimeout, Func<T1, T2, TResult> func, T1 arg1, T2 arg2, out TResult result) { return TryGetSync(target, millisecondsTimeout, false, () => func(arg1, arg2), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, TResult>(this ICollection target, TimeSpan timeout, Func<T1, T2, TResult> func, T1 arg1, T2 arg2, out TResult result) { return TryGetSync(target, timeout, false, () => func(arg1, arg2), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T1, T2, TResult>(this ICollection target, bool requireSync, Func<T1, T2, TResult> func, T1 arg1, T2 arg2, out TResult result) { return TryGetSync(target, requireSync, () => func(arg1, arg2), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T1, T2, TResult>(this ICollection target, Func<T1, T2, TResult> func, T1 arg1, T2 arg2, out TResult result) { return TryGetSync(target, false, () => func(arg1, arg2), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T">The type of parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg">The parameter to pass to the delegate method.</typepparamaram>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T, TResult>(this ICollection target, int millisecondsTimeout, bool requireSync, Func<T, TResult> func, T arg, out TResult result) { return TryGetSync(target, millisecondsTimeout, requireSync, () => func(arg), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T">The type of parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg">The parameter to pass to the delegate method.</typepparamaram>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T, TResult>(this ICollection target, TimeSpan timeout, bool requireSync, Func<T, TResult> func, T arg, out TResult result) { return TryGetSync(target, timeout, requireSync, () => func(arg), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T">The type of parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg">The parameter to pass to the delegate method.</typepparamaram>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T, TResult>(this ICollection target, int millisecondsTimeout, Func<T, TResult> func, T arg, out TResult result) { return TryGetSync(target, millisecondsTimeout, false, () => func(arg), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T">The type of parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg">The parameter to pass to the delegate method.</typepparamaram>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<T, TResult>(this ICollection target, bool requireSync, Func<T, TResult> func, T arg, out TResult result) { return TryGetSync(target, requireSync, () => func(arg), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T">The type of parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg">The parameter to pass to the delegate method.</typepparamaram>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T, TResult>(this ICollection target, TimeSpan timeout, Func<T, TResult> func, T arg, out TResult result) { return TryGetSync(target, timeout, false, () => func(arg), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T">The type of parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg">The parameter to pass to the delegate method.</typepparamaram>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<T, TResult>(this ICollection target, Func<T, TResult> func, T arg, out TResult result) { return TryGetSync(target, false, () => func(arg), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<TResult>(this ICollection target, int millisecondsTimeout, bool requireSync, Func<TResult> func, out TResult result)
        {
            if (target != null)
            {
                object syncRoot;
                if (!target.IsSynchronized || (syncRoot = target.SyncRoot) == null)
                {
                    if (requireSync)
                    {
                        result = default(TResult);
                        return false;
                    }
                    syncRoot = target;
                }

                if (Monitor.TryEnter(syncRoot, millisecondsTimeout))
                {
                    try { result = func(); } finally { Monitor.Exit(syncRoot); }
                    return true;
                }
            }
            else if (!requireSync)
            {
                result = func();
                return true;
            }
            result = default(TResult);
            return false;
        }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<TResult>(this ICollection target, TimeSpan timeout, bool requireSync, Func<TResult> func, out TResult result)
        {
            if (target != null)
            {
                object syncRoot;
                if (!target.IsSynchronized || (syncRoot = target.SyncRoot) == null)
                {
                    if (requireSync)
                    {
                        result = default(TResult);
                        return false;
                    }
                    syncRoot = target;
                }

                if (Monitor.TryEnter(syncRoot, timeout))
                {
                    try { result = func(); } finally { Monitor.Exit(syncRoot); }
                    return true;
                }
            }
            else if (!requireSync)
            {
                result = func();
                return true;
            }
            result = default(TResult);
            return false;
        }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryGetSync<TResult>(this ICollection target, bool requireSync, Func<TResult> func, out TResult result)
        {
            if (target != null)
            {
                object syncRoot;
                if (!target.IsSynchronized || (syncRoot = target.SyncRoot) == null)
                {
                    if (requireSync)
                    {
                        result = default(TResult);
                        return false;
                    }
                    syncRoot = target;
                }

                if (Monitor.TryEnter(syncRoot))
                {
                    try { result = func(); } finally { Monitor.Exit(syncRoot); }
                    return true;
                }
            }
            else if (!requireSync)
            {
                result = func();
                return true;
            }
            result = default(TResult);
            return false;
        }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="func"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryGetSync<TResult>(this ICollection target, Func<TResult> func, out TResult result)
        {
            if (target == null)
            {
                result = func();
                return true;
            }
            object syncRoot;
            if (!target.IsSynchronized || (syncRoot = target.SyncRoot) == null)
                syncRoot = target;

            if (Monitor.TryEnter(syncRoot))
            {
                try { result = func(); } finally { Monitor.Exit(syncRoot); }
                return true;
            }

            result = default(TResult);
            return false;
        }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T16">The type of the sixteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <param name="arg16">The sixteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this ICollection target, int millisecondsTimeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) { return TryInvokeSync(target, millisecondsTimeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T16">The type of the sixteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <param name="arg16">The sixteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this ICollection target, TimeSpan timeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) { return TryInvokeSync(target, timeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T16">The type of the sixteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <param name="arg16">The sixteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this ICollection target, int millisecondsTimeout, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) { return TryInvokeSync(target, millisecondsTimeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T16">The type of the sixteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <param name="arg16">The sixteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this ICollection target, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) { return TryInvokeSync(target, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T16">The type of the sixteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <param name="arg16">The sixteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this ICollection target, TimeSpan timeout, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) { return TryInvokeSync(target, timeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T16">The type of the sixteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <param name="arg16">The sixteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this ICollection target, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) { return TryInvokeSync(target, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this ICollection target, int millisecondsTimeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) { return TryInvokeSync(target, millisecondsTimeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this ICollection target, TimeSpan timeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) { return TryInvokeSync(target, timeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this ICollection target, int millisecondsTimeout, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) { return TryInvokeSync(target, millisecondsTimeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this ICollection target, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) { return TryInvokeSync(target, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this ICollection target, TimeSpan timeout, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) { return TryInvokeSync(target, timeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this ICollection target, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) { return TryInvokeSync(target, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this ICollection target, int millisecondsTimeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) { return TryInvokeSync(target, millisecondsTimeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this ICollection target, TimeSpan timeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) { return TryInvokeSync(target, timeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this ICollection target, int millisecondsTimeout, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) { return TryInvokeSync(target, millisecondsTimeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this ICollection target, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) { return TryInvokeSync(target, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this ICollection target, TimeSpan timeout, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) { return TryInvokeSync(target, timeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this ICollection target, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) { return TryInvokeSync(target, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this ICollection target, int millisecondsTimeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) { return TryInvokeSync(target, millisecondsTimeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this ICollection target, TimeSpan timeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) { return TryInvokeSync(target, timeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this ICollection target, int millisecondsTimeout, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) { return TryInvokeSync(target, millisecondsTimeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this ICollection target, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) { return TryInvokeSync(target, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this ICollection target, TimeSpan timeout, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) { return TryInvokeSync(target, timeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this ICollection target, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) { return TryInvokeSync(target, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this ICollection target, int millisecondsTimeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) { return TryInvokeSync(target, millisecondsTimeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this ICollection target, TimeSpan timeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) { return TryInvokeSync(target, timeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this ICollection target, int millisecondsTimeout, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) { return TryInvokeSync(target, millisecondsTimeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this ICollection target, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) { return TryInvokeSync(target, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this ICollection target, TimeSpan timeout, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) { return TryInvokeSync(target, timeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this ICollection target, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) { return TryInvokeSync(target, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this ICollection target, int millisecondsTimeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) { return TryInvokeSync(target, millisecondsTimeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this ICollection target, TimeSpan timeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) { return TryInvokeSync(target, timeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this ICollection target, int millisecondsTimeout, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) { return TryInvokeSync(target, millisecondsTimeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this ICollection target, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) { return TryInvokeSync(target, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this ICollection target, TimeSpan timeout, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) { return TryInvokeSync(target, timeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this ICollection target, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) { return TryInvokeSync(target, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this ICollection target, int millisecondsTimeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) { return TryInvokeSync(target, millisecondsTimeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this ICollection target, TimeSpan timeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) { return TryInvokeSync(target, timeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this ICollection target, int millisecondsTimeout, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) { return TryInvokeSync(target, millisecondsTimeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this ICollection target, TimeSpan timeout, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) { return TryInvokeSync(target, timeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this ICollection target, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) { return TryInvokeSync(target, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this ICollection target, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) { return TryInvokeSync(target, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this ICollection target, int millisecondsTimeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) { return TryInvokeSync(target, millisecondsTimeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this ICollection target, TimeSpan timeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) { return TryInvokeSync(target, timeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this ICollection target, int millisecondsTimeout, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) { return TryInvokeSync(target, millisecondsTimeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this ICollection target, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) { return TryInvokeSync(target, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this ICollection target, TimeSpan timeout, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) { return TryInvokeSync(target, timeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this ICollection target, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) { return TryInvokeSync(target, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8>(this ICollection target, int millisecondsTimeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) { return TryInvokeSync(target, millisecondsTimeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8>(this ICollection target, TimeSpan timeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) { return TryInvokeSync(target, timeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8>(this ICollection target, int millisecondsTimeout, Action<T1, T2, T3, T4, T5, T6, T7, T8> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) { return TryInvokeSync(target, millisecondsTimeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8>(this ICollection target, TimeSpan timeout, Action<T1, T2, T3, T4, T5, T6, T7, T8> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) { return TryInvokeSync(target, timeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8>(this ICollection target, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) { return TryInvokeSync(target, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8>(this ICollection target, Action<T1, T2, T3, T4, T5, T6, T7, T8> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) { return TryInvokeSync(target, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7>(this ICollection target, int millisecondsTimeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) { return TryInvokeSync(target, millisecondsTimeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7>(this ICollection target, TimeSpan timeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) { return TryInvokeSync(target, timeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7>(this ICollection target, int millisecondsTimeout, Action<T1, T2, T3, T4, T5, T6, T7> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) { return TryInvokeSync(target, millisecondsTimeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7>(this ICollection target, TimeSpan timeout, Action<T1, T2, T3, T4, T5, T6, T7> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) { return TryInvokeSync(target, timeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7>(this ICollection target, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) { return TryInvokeSync(target, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7>(this ICollection target, Action<T1, T2, T3, T4, T5, T6, T7> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) { return TryInvokeSync(target, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6>(this ICollection target, int millisecondsTimeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) { return TryInvokeSync(target, millisecondsTimeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6>(this ICollection target, TimeSpan timeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) { return TryInvokeSync(target, timeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6>(this ICollection target, int millisecondsTimeout, Action<T1, T2, T3, T4, T5, T6> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) { return TryInvokeSync(target, millisecondsTimeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6>(this ICollection target, TimeSpan timeout, Action<T1, T2, T3, T4, T5, T6> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) { return TryInvokeSync(target, timeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6>(this ICollection target, bool requireSync, Action<T1, T2, T3, T4, T5, T6> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) { return TryInvokeSync(target, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6>(this ICollection target, Action<T1, T2, T3, T4, T5, T6> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) { return TryInvokeSync(target, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5>(this ICollection target, int millisecondsTimeout, bool requireSync, Action<T1, T2, T3, T4, T5> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) { return TryInvokeSync(target, millisecondsTimeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5>(this ICollection target, TimeSpan timeout, bool requireSync, Action<T1, T2, T3, T4, T5> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) { return TryInvokeSync(target, timeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5>(this ICollection target, int millisecondsTimeout, Action<T1, T2, T3, T4, T5> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) { return TryInvokeSync(target, millisecondsTimeout, false, () => action(arg1, arg2, arg3, arg4, arg5)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5>(this ICollection target, bool requireSync, Action<T1, T2, T3, T4, T5> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) { return TryInvokeSync(target, requireSync, () => action(arg1, arg2, arg3, arg4, arg5)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5>(this ICollection target, TimeSpan timeout, Action<T1, T2, T3, T4, T5> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) { return TryInvokeSync(target, timeout, false, () => action(arg1, arg2, arg3, arg4, arg5)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5>(this ICollection target, Action<T1, T2, T3, T4, T5> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) { return TryInvokeSync(target, false, () => action(arg1, arg2, arg3, arg4, arg5)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4>(this ICollection target, int millisecondsTimeout, bool requireSync, Action<T1, T2, T3, T4> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4) { return TryInvokeSync(target, millisecondsTimeout, requireSync, () => action(arg1, arg2, arg3, arg4)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4>(this ICollection target, TimeSpan timeout, bool requireSync, Action<T1, T2, T3, T4> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4) { return TryInvokeSync(target, timeout, requireSync, () => action(arg1, arg2, arg3, arg4)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4>(this ICollection target, int millisecondsTimeout, Action<T1, T2, T3, T4> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4) { return TryInvokeSync(target, millisecondsTimeout, false, () => action(arg1, arg2, arg3, arg4)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4>(this ICollection target, TimeSpan timeout, Action<T1, T2, T3, T4> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4) { return TryInvokeSync(target, timeout, false, () => action(arg1, arg2, arg3, arg4)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4>(this ICollection target, bool requireSync, Action<T1, T2, T3, T4> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4) { return TryInvokeSync(target, requireSync, () => action(arg1, arg2, arg3, arg4)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4>(this ICollection target, Action<T1, T2, T3, T4> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4) { return TryInvokeSync(target, false, () => action(arg1, arg2, arg3, arg4)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3>(this ICollection target, int millisecondsTimeout, bool requireSync, Action<T1, T2, T3> action, T1 arg1, T2 arg2, T3 arg3) { return TryInvokeSync(target, millisecondsTimeout, requireSync, () => action(arg1, arg2, arg3)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3>(this ICollection target, TimeSpan timeout, bool requireSync, Action<T1, T2, T3> action, T1 arg1, T2 arg2, T3 arg3) { return TryInvokeSync(target, timeout, requireSync, () => action(arg1, arg2, arg3)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3>(this ICollection target, int millisecondsTimeout, Action<T1, T2, T3> action, T1 arg1, T2 arg2, T3 arg3) { return TryInvokeSync(target, millisecondsTimeout, false, () => action(arg1, arg2, arg3)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2, T3>(this ICollection target, bool requireSync, Action<T1, T2, T3> action, T1 arg1, T2 arg2, T3 arg3) { return TryInvokeSync(target, requireSync, () => action(arg1, arg2, arg3)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3>(this ICollection target, TimeSpan timeout, Action<T1, T2, T3> action, T1 arg1, T2 arg2, T3 arg3) { return TryInvokeSync(target, timeout, false, () => action(arg1, arg2, arg3)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2, T3>(this ICollection target, Action<T1, T2, T3> action, T1 arg1, T2 arg2, T3 arg3) { return TryInvokeSync(target, false, () => action(arg1, arg2, arg3)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2>(this ICollection target, int millisecondsTimeout, bool requireSync, Action<T1, T2> action, T1 arg1, T2 arg2) { return TryInvokeSync(target, millisecondsTimeout, requireSync, () => action(arg1, arg2)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2>(this ICollection target, TimeSpan timeout, bool requireSync, Action<T1, T2> action, T1 arg1, T2 arg2) { return TryInvokeSync(target, timeout, requireSync, () => action(arg1, arg2)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2>(this ICollection target, int millisecondsTimeout, Action<T1, T2> action, T1 arg1, T2 arg2) { return TryInvokeSync(target, millisecondsTimeout, false, () => action(arg1, arg2)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2>(this ICollection target, TimeSpan timeout, Action<T1, T2> action, T1 arg1, T2 arg2) { return TryInvokeSync(target, timeout, false, () => action(arg1, arg2)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T1, T2>(this ICollection target, bool requireSync, Action<T1, T2> action, T1 arg1, T2 arg2) { return TryInvokeSync(target, requireSync, () => action(arg1, arg2)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T1, T2>(this ICollection target, Action<T1, T2> action, T1 arg1, T2 arg2) { return TryInvokeSync(target, false, () => action(arg1, arg2)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T">The type of parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg">The parameter to pass to the delegate method.</typepparamaram>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T>(this ICollection target, int millisecondsTimeout, bool requireSync, Action<T> action, T arg) { return TryInvokeSync(target, millisecondsTimeout, requireSync, () => action(arg)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T">The type of parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg">The parameter to pass to the delegate method.</typepparamaram>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T>(this ICollection target, TimeSpan timeout, bool requireSync, Action<T> action, T arg) { return TryInvokeSync(target, timeout, requireSync, () => action(arg)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T">The type of parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg">The parameter to pass to the delegate method.</typepparamaram>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T>(this ICollection target, int millisecondsTimeout, Action<T> action, T arg) { return TryInvokeSync(target, millisecondsTimeout, false, () => action(arg)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T">The type of parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg">The parameter to pass to the delegate method.</typepparamaram>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync<T>(this ICollection target, bool requireSync, Action<T> action, T arg) { return TryInvokeSync(target, requireSync, () => action(arg)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T">The type of parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg">The parameter to pass to the delegate method.</typepparamaram>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T>(this ICollection target, TimeSpan timeout, Action<T> action, T arg) { return TryInvokeSync(target, timeout, false, () => action(arg)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <typeparam name="T">The type of parameter to pass to the delegate method.</typeparam>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg">The parameter to pass to the delegate method.</typepparamaram>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync<T>(this ICollection target, Action<T> action, T arg) { return TryInvokeSync(target, false, () => action(arg)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync(this ICollection target, int millisecondsTimeout, bool requireSync, Action action)
        {
            if (target != null)
            {
                object syncRoot;
                if (!target.IsSynchronized || (syncRoot = target.SyncRoot) == null)
                {
                    if (requireSync)
                        return false;
                    syncRoot = target;
                }

                if (Monitor.TryEnter(syncRoot, millisecondsTimeout))
                {
                    try { action(); } finally { Monitor.Exit(syncRoot); }
                    return true;
                }
            }
            else if (!requireSync)
            {
                action();
                return true;
            }
            return false;
        }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync(this ICollection target, TimeSpan timeout, bool requireSync, Action action)
        {
            if (target != null)
            {
                object syncRoot;
                if (!target.IsSynchronized || (syncRoot = target.SyncRoot) == null)
                {
                    if (requireSync)
                        return false;
                    syncRoot = target;
                }

                if (Monitor.TryEnter(syncRoot, timeout))
                {
                    try { action(); } finally { Monitor.Exit(syncRoot); }
                    return true;
                }
            }
            else if (!requireSync)
            {
                action();
                return true;
            }
            return false;
        }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync(this ICollection target, int millisecondsTimeout, Action action) { return TryInvokeSync(target, millisecondsTimeout, false, action); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync(this ICollection target, TimeSpan timeout, Action action) { return TryInvokeSync(target, timeout, false, action); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="action"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="action"/> is invoked without obtaining a lock.
        /// If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>.
        /// Otherwise, a lock is obtained on the <paramref name="target"/> object itself if <paramref name="requireSync"/> is <c>false</c>.</remarks>
        public static bool TryInvokeSync(this ICollection target, bool requireSync, Action action)
        {
            if (target != null)
            {
                object syncRoot;
                if (!target.IsSynchronized || (syncRoot = target.SyncRoot) == null)
                {
                    if (requireSync)
                        return false;
                    syncRoot = target;
                }

                if (Monitor.TryEnter(syncRoot))
                {
                    try { action(); } finally { Monitor.Exit(syncRoot); }
                    return true;
                }
            }
            else if (!requireSync)
            {
                action();
                return true;
            }
            return false;
        }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified collection.
        /// </summary>
        /// <param name="target">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="target"/> is null, <paramref name="action"/> is invoked without obtaining a lock. If <paramref name="target"/> is synchronized (<seealso cref="ICollection.IsSynchronized"/> = <c>false</c>), then a lock is obtained on the <seealso cref="ICollection.SyncRoot"/> property of the <paramref name="target"/> <seealso cref="ICollection"/>. Otherwise, a lock is obtained on the <paramref name="target"/> object itself.</remarks>
        public static bool TryInvokeSync(this ICollection target, Action action) { return TryInvokeSync(target, false, action); }

        /// <summary>
        /// Invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T16">The type of the sixteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <param name="arg16">The sixteenth parameter to pass to the delegate method.</param>
        /// <returns>The value returned by the delegate method.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static TResult GetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(object syncRoot, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) { return GetSync(syncRoot, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16)); }
        /// <summary>
        /// Invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <returns>The value returned by the delegate method.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static TResult GetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(object syncRoot, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) { return GetSync(syncRoot, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)); }
        /// <summary>
        /// Invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <returns>The value returned by the delegate method.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static TResult GetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(object syncRoot, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) { return GetSync(syncRoot, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)); }
        /// <summary>
        /// Invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <returns>The value returned by the delegate method.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static TResult GetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(object syncRoot, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) { return GetSync(syncRoot, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)); }
        /// <summary>
        /// Invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <returns>The value returned by the delegate method.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static TResult GetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(object syncRoot, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) { return GetSync(syncRoot, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)); }
        /// <summary>
        /// Invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <returns>The value returned by the delegate method.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static TResult GetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(object syncRoot, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) { return GetSync(syncRoot, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)); }
        /// <summary>
        /// Invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <returns>The value returned by the delegate method.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static TResult GetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(object syncRoot, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) { return GetSync(syncRoot, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)); }
        /// <summary>
        /// Invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <returns>The value returned by the delegate method.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static TResult GetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(object syncRoot, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) { return GetSync(syncRoot, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)); }
        /// <summary>
        /// Invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <returns>The value returned by the delegate method.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static TResult GetSync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(object syncRoot, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) { return GetSync(syncRoot, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)); }
        /// <summary>
        /// Invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <returns>The value returned by the delegate method.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static TResult GetSync<T1, T2, T3, T4, T5, T6, T7, TResult>(object syncRoot, Func<T1, T2, T3, T4, T5, T6, T7, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) { return GetSync(syncRoot, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }
        /// <summary>
        /// Invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <returns>The value returned by the delegate method.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static TResult GetSync<T1, T2, T3, T4, T5, T6, TResult>(object syncRoot, Func<T1, T2, T3, T4, T5, T6, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) { return GetSync(syncRoot, () => func(arg1, arg2, arg3, arg4, arg5, arg6)); }
        /// <summary>
        /// Invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <returns>The value returned by the delegate method.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static TResult GetSync<T1, T2, T3, T4, T5, TResult>(object syncRoot, Func<T1, T2, T3, T4, T5, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) { return GetSync(syncRoot, () => func(arg1, arg2, arg3, arg4, arg5)); }
        /// <summary>
        /// Invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <returns>The value returned by the delegate method.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static TResult GetSync<T1, T2, T3, T4, TResult>(object syncRoot, Func<T1, T2, T3, T4, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4) { return GetSync(syncRoot, () => func(arg1, arg2, arg3, arg4)); }
        /// <summary>
        /// Invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <returns>The value returned by the delegate method.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static TResult GetSync<T1, T2, T3, TResult>(object syncRoot, Func<T1, T2, T3, TResult> func, T1 arg1, T2 arg2, T3 arg3) { return GetSync(syncRoot, () => func(arg1, arg2, arg3)); }
        /// <summary>
        /// Invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <returns>The value returned by the delegate method.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static TResult GetSync<T1, T2, TResult>(object syncRoot, Func<T1, T2, TResult> func, T1 arg1, T2 arg2) { return GetSync(syncRoot, () => func(arg1, arg2)); }
        /// <summary>
        /// Invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T">The type of parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg">The parameter to pass to the delegate method.</typepparamaram>
        /// <returns>The value returned by the delegate method.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static TResult GetSync<T, TResult>(object syncRoot, Func<T, TResult> func, T arg) { return GetSync(syncRoot, () => func(arg)); }
        /// <summary>
        /// Invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <returns>The value returned by the delegate method.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static TResult GetSync<TResult>(object syncRoot, Func<TResult> func)
        {
            if (syncRoot == null)
                return func();
            Monitor.Enter(syncRoot);
            try { return func(); } finally { Monitor.Exit(syncRoot); }
        }
        /// <summary>
        /// Invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T16">The type of the sixteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <param name="arg16">The sixteenth parameter to pass to the delegate method.</param>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static void InvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(object syncRoot, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) { InvokeSync(syncRoot, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16)); }
        /// <summary>
        /// Invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static void InvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(object syncRoot, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) { InvokeSync(syncRoot, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)); }
        /// <summary>
        /// Invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static void InvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(object syncRoot, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) { InvokeSync(syncRoot, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)); }
        /// <summary>
        /// Invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static void InvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(object syncRoot, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) { InvokeSync(syncRoot, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)); }
        /// <summary>
        /// Invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static void InvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(object syncRoot, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) { InvokeSync(syncRoot, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)); }
        /// <summary>
        /// Invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static void InvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(object syncRoot, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) { InvokeSync(syncRoot, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)); }
        /// <summary>
        /// Invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static void InvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(object syncRoot, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) { InvokeSync(syncRoot, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)); }
        /// <summary>
        /// Invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static void InvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9>(object syncRoot, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) { InvokeSync(syncRoot, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)); }
        /// <summary>
        /// Invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static void InvokeSync<T1, T2, T3, T4, T5, T6, T7, T8>(object syncRoot, Action<T1, T2, T3, T4, T5, T6, T7, T8> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) { InvokeSync(syncRoot, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)); }
        /// <summary>
        /// Invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static void InvokeSync<T1, T2, T3, T4, T5, T6, T7>(object syncRoot, Action<T1, T2, T3, T4, T5, T6, T7> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) { InvokeSync(syncRoot, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }
        /// <summary>
        /// Invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static void InvokeSync<T1, T2, T3, T4, T5, T6>(object syncRoot, Action<T1, T2, T3, T4, T5, T6> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) { InvokeSync(syncRoot, () => action(arg1, arg2, arg3, arg4, arg5, arg6)); }
        /// <summary>
        /// Invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static void InvokeSync<T1, T2, T3, T4, T5>(object syncRoot, Action<T1, T2, T3, T4, T5> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) { InvokeSync(syncRoot, () => action(arg1, arg2, arg3, arg4, arg5)); }
        /// <summary>
        /// Invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static void InvokeSync<T1, T2, T3, T4>(object syncRoot, Action<T1, T2, T3, T4> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4) { InvokeSync(syncRoot, () => action(arg1, arg2, arg3, arg4)); }
        /// <summary>
        /// Invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static void InvokeSync<T1, T2, T3>(object syncRoot, Action<T1, T2, T3> action, T1 arg1, T2 arg2, T3 arg3) { InvokeSync(syncRoot, () => action(arg1, arg2, arg3)); }
        /// <summary>
        /// Invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static void InvokeSync<T1, T2>(object syncRoot, Action<T1, T2> action, T1 arg1, T2 arg2) { InvokeSync(syncRoot, () => action(arg1, arg2)); }
        /// <summary>
        /// Invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T">The type of parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg">The parameter to pass to the delegate method.</typepparamaram>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static void InvokeSync<T>(object syncRoot, Action<T> action, T arg) { InvokeSync(syncRoot, () => action(arg)); }
        /// <summary>
        /// Invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static void InvokeSync(object syncRoot, Action action)
        {
            if (syncRoot == null)
                action();
            else
            {
                Monitor.Enter(syncRoot);
                try { action(); } finally { Monitor.Exit(syncRoot); }
            }
        }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T16">The type of the sixteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <param name="arg16">The sixteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(object syncRoot, int millisecondsTimeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, out TResult result) { return TryGetSync(syncRoot, millisecondsTimeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T16">The type of the sixteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <param name="arg16">The sixteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(object syncRoot, TimeSpan timeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, out TResult result) { return TryGetSync(syncRoot, timeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T16">The type of the sixteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <param name="arg16">The sixteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(object syncRoot, int millisecondsTimeout, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, out TResult result) { return TryGetSync(syncRoot, millisecondsTimeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T16">The type of the sixteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <param name="arg16">The sixteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(object syncRoot, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, out TResult result) { return TryGetSync(syncRoot, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T16">The type of the sixteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <param name="arg16">The sixteenth parameter to pass to the delegate method.</param>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(object syncRoot, TimeSpan timeout, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, out TResult result) { return TryGetSync(syncRoot, timeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T16">The type of the sixteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <param name="arg16">The sixteenth parameter to pass to the delegate method.</param>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(object syncRoot, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, out TResult result) { return TryGetSync(syncRoot, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(object syncRoot, int millisecondsTimeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, out TResult result) { return TryGetSync(syncRoot, millisecondsTimeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(object syncRoot, TimeSpan timeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, out TResult result) { return TryGetSync(syncRoot, timeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(object syncRoot, int millisecondsTimeout, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, out TResult result) { return TryGetSync(syncRoot, millisecondsTimeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(object syncRoot, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, out TResult result) { return TryGetSync(syncRoot, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(object syncRoot, TimeSpan timeout, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, out TResult result) { return TryGetSync(syncRoot, timeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(object syncRoot, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, out TResult result) { return TryGetSync(syncRoot, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(object syncRoot, int millisecondsTimeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, out TResult result) { return TryGetSync(syncRoot, millisecondsTimeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(object syncRoot, TimeSpan timeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, out TResult result) { return TryGetSync(syncRoot, timeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(object syncRoot, int millisecondsTimeout, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, out TResult result) { return TryGetSync(syncRoot, millisecondsTimeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(object syncRoot, TimeSpan timeout, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, out TResult result) { return TryGetSync(syncRoot, timeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(object syncRoot, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, out TResult result) { return TryGetSync(syncRoot, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(object syncRoot, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, out TResult result) { return TryGetSync(syncRoot, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(object syncRoot, int millisecondsTimeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, out TResult result) { return TryGetSync(syncRoot, millisecondsTimeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(object syncRoot, TimeSpan timeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, out TResult result) { return TryGetSync(syncRoot, timeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(object syncRoot, int millisecondsTimeout, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, out TResult result) { return TryGetSync(syncRoot, millisecondsTimeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(object syncRoot, TimeSpan timeout, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, out TResult result) { return TryGetSync(syncRoot, timeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(object syncRoot, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, out TResult result) { return TryGetSync(syncRoot, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(object syncRoot, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, out TResult result) { return TryGetSync(syncRoot, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(object syncRoot, int millisecondsTimeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, out TResult result) { return TryGetSync(syncRoot, millisecondsTimeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(object syncRoot, TimeSpan timeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, out TResult result) { return TryGetSync(syncRoot, timeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(object syncRoot, int millisecondsTimeout, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, out TResult result) { return TryGetSync(syncRoot, millisecondsTimeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(object syncRoot, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, out TResult result) { return TryGetSync(syncRoot, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(object syncRoot, TimeSpan timeout, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, out TResult result) { return TryGetSync(syncRoot, timeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(object syncRoot, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, out TResult result) { return TryGetSync(syncRoot, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(object syncRoot, int millisecondsTimeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, out TResult result) { return TryGetSync(syncRoot, millisecondsTimeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(object syncRoot, TimeSpan timeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, out TResult result) { return TryGetSync(syncRoot, timeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(object syncRoot, int millisecondsTimeout, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, out TResult result) { return TryGetSync(syncRoot, millisecondsTimeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(object syncRoot, TimeSpan timeout, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, out TResult result) { return TryGetSync(syncRoot, timeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(object syncRoot, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, out TResult result) { return TryGetSync(syncRoot, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(object syncRoot, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, out TResult result) { return TryGetSync(syncRoot, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(object syncRoot, int millisecondsTimeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, out TResult result) { return TryGetSync(syncRoot, millisecondsTimeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(object syncRoot, TimeSpan timeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, out TResult result) { return TryGetSync(syncRoot, timeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(object syncRoot, int millisecondsTimeout, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, out TResult result) { return TryGetSync(syncRoot, millisecondsTimeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(object syncRoot, TimeSpan timeout, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, out TResult result) { return TryGetSync(syncRoot, timeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(object syncRoot, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, out TResult result) { return TryGetSync(syncRoot, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(object syncRoot, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, out TResult result) { return TryGetSync(syncRoot, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(object syncRoot, int millisecondsTimeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, out TResult result) { return TryGetSync(syncRoot, millisecondsTimeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(object syncRoot, TimeSpan timeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, out TResult result) { return TryGetSync(syncRoot, timeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(object syncRoot, int millisecondsTimeout, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, out TResult result) { return TryGetSync(syncRoot, millisecondsTimeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(object syncRoot, TimeSpan timeout, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, out TResult result) { return TryGetSync(syncRoot, timeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(object syncRoot, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, out TResult result) { return TryGetSync(syncRoot, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(object syncRoot, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, out TResult result) { return TryGetSync(syncRoot, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(object syncRoot, int millisecondsTimeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, out TResult result) { return TryGetSync(syncRoot, millisecondsTimeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(object syncRoot, TimeSpan timeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, out TResult result) { return TryGetSync(syncRoot, timeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(object syncRoot, int millisecondsTimeout, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, out TResult result) { return TryGetSync(syncRoot, millisecondsTimeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(object syncRoot, TimeSpan timeout, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, out TResult result) { return TryGetSync(syncRoot, timeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(object syncRoot, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, out TResult result) { return TryGetSync(syncRoot, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(object syncRoot, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, out TResult result) { return TryGetSync(syncRoot, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, TResult>(object syncRoot, int millisecondsTimeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, out TResult result) { return TryGetSync(syncRoot, millisecondsTimeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, TResult>(object syncRoot, TimeSpan timeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, out TResult result) { return TryGetSync(syncRoot, timeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, TResult>(object syncRoot, int millisecondsTimeout, Func<T1, T2, T3, T4, T5, T6, T7, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, out TResult result) { return TryGetSync(syncRoot, millisecondsTimeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, TResult>(object syncRoot, TimeSpan timeout, Func<T1, T2, T3, T4, T5, T6, T7, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, out TResult result) { return TryGetSync(syncRoot, timeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, TResult>(object syncRoot, bool requireSync, Func<T1, T2, T3, T4, T5, T6, T7, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, out TResult result) { return TryGetSync(syncRoot, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, T7, TResult>(object syncRoot, Func<T1, T2, T3, T4, T5, T6, T7, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, out TResult result) { return TryGetSync(syncRoot, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6, arg7), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, TResult>(object syncRoot, int millisecondsTimeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, out TResult result) { return TryGetSync(syncRoot, millisecondsTimeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, TResult>(object syncRoot, TimeSpan timeout, bool requireSync, Func<T1, T2, T3, T4, T5, T6, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, out TResult result) { return TryGetSync(syncRoot, timeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, TResult>(object syncRoot, int millisecondsTimeout, Func<T1, T2, T3, T4, T5, T6, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, out TResult result) { return TryGetSync(syncRoot, millisecondsTimeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, TResult>(object syncRoot, bool requireSync, Func<T1, T2, T3, T4, T5, T6, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, out TResult result) { return TryGetSync(syncRoot, requireSync, () => func(arg1, arg2, arg3, arg4, arg5, arg6), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, TResult>(object syncRoot, TimeSpan timeout, Func<T1, T2, T3, T4, T5, T6, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, out TResult result) { return TryGetSync(syncRoot, timeout, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, T6, TResult>(object syncRoot, Func<T1, T2, T3, T4, T5, T6, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, out TResult result) { return TryGetSync(syncRoot, false, () => func(arg1, arg2, arg3, arg4, arg5, arg6), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, TResult>(object syncRoot, int millisecondsTimeout, bool requireSync, Func<T1, T2, T3, T4, T5, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, out TResult result) { return TryGetSync(syncRoot, millisecondsTimeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, TResult>(object syncRoot, TimeSpan timeout, bool requireSync, Func<T1, T2, T3, T4, T5, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, out TResult result) { return TryGetSync(syncRoot, timeout, requireSync, () => func(arg1, arg2, arg3, arg4, arg5), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, TResult>(object syncRoot, int millisecondsTimeout, Func<T1, T2, T3, T4, T5, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, out TResult result) { return TryGetSync(syncRoot, millisecondsTimeout, false, () => func(arg1, arg2, arg3, arg4, arg5), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, TResult>(object syncRoot, bool requireSync, Func<T1, T2, T3, T4, T5, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, out TResult result) { return TryGetSync(syncRoot, requireSync, () => func(arg1, arg2, arg3, arg4, arg5), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, TResult>(object syncRoot, TimeSpan timeout, Func<T1, T2, T3, T4, T5, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, out TResult result) { return TryGetSync(syncRoot, timeout, false, () => func(arg1, arg2, arg3, arg4, arg5), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, T5, TResult>(object syncRoot, Func<T1, T2, T3, T4, T5, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, out TResult result) { return TryGetSync(syncRoot, false, () => func(arg1, arg2, arg3, arg4, arg5), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, TResult>(object syncRoot, int millisecondsTimeout, bool requireSync, Func<T1, T2, T3, T4, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, out TResult result) { return TryGetSync(syncRoot, millisecondsTimeout, requireSync, () => func(arg1, arg2, arg3, arg4), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, TResult>(object syncRoot, TimeSpan timeout, bool requireSync, Func<T1, T2, T3, T4, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, out TResult result) { return TryGetSync(syncRoot, timeout, requireSync, () => func(arg1, arg2, arg3, arg4), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, TResult>(object syncRoot, int millisecondsTimeout, Func<T1, T2, T3, T4, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, out TResult result) { return TryGetSync(syncRoot, millisecondsTimeout, false, () => func(arg1, arg2, arg3, arg4), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, TResult>(object syncRoot, TimeSpan timeout, Func<T1, T2, T3, T4, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, out TResult result) { return TryGetSync(syncRoot, timeout, false, () => func(arg1, arg2, arg3, arg4), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, TResult>(object syncRoot, bool requireSync, Func<T1, T2, T3, T4, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, out TResult result) { return TryGetSync(syncRoot, requireSync, () => func(arg1, arg2, arg3, arg4), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, T4, TResult>(object syncRoot, Func<T1, T2, T3, T4, TResult> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, out TResult result) { return TryGetSync(syncRoot, false, () => func(arg1, arg2, arg3, arg4), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, TResult>(object syncRoot, int millisecondsTimeout, bool requireSync, Func<T1, T2, T3, TResult> func, T1 arg1, T2 arg2, T3 arg3, out TResult result) { return TryGetSync(syncRoot, millisecondsTimeout, requireSync, () => func(arg1, arg2, arg3), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, TResult>(object syncRoot, TimeSpan timeout, bool requireSync, Func<T1, T2, T3, TResult> func, T1 arg1, T2 arg2, T3 arg3, out TResult result) { return TryGetSync(syncRoot, timeout, requireSync, () => func(arg1, arg2, arg3), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, TResult>(object syncRoot, int millisecondsTimeout, Func<T1, T2, T3, TResult> func, T1 arg1, T2 arg2, T3 arg3, out TResult result) { return TryGetSync(syncRoot, millisecondsTimeout, false, () => func(arg1, arg2, arg3), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, TResult>(object syncRoot, bool requireSync, Func<T1, T2, T3, TResult> func, T1 arg1, T2 arg2, T3 arg3, out TResult result) { return TryGetSync(syncRoot, requireSync, () => func(arg1, arg2, arg3), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, TResult>(object syncRoot, TimeSpan timeout, Func<T1, T2, T3, TResult> func, T1 arg1, T2 arg2, T3 arg3, out TResult result) { return TryGetSync(syncRoot, timeout, false, () => func(arg1, arg2, arg3), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, T3, TResult>(object syncRoot, Func<T1, T2, T3, TResult> func, T1 arg1, T2 arg2, T3 arg3, out TResult result) { return TryGetSync(syncRoot, false, () => func(arg1, arg2, arg3), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, TResult>(object syncRoot, int millisecondsTimeout, bool requireSync, Func<T1, T2, TResult> func, T1 arg1, T2 arg2, out TResult result) { return TryGetSync(syncRoot, millisecondsTimeout, requireSync, () => func(arg1, arg2), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, TResult>(object syncRoot, TimeSpan timeout, bool requireSync, Func<T1, T2, TResult> func, T1 arg1, T2 arg2, out TResult result) { return TryGetSync(syncRoot, timeout, requireSync, () => func(arg1, arg2), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, TResult>(object syncRoot, int millisecondsTimeout, Func<T1, T2, TResult> func, T1 arg1, T2 arg2, out TResult result) { return TryGetSync(syncRoot, millisecondsTimeout, false, () => func(arg1, arg2), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, TResult>(object syncRoot, TimeSpan timeout, Func<T1, T2, TResult> func, T1 arg1, T2 arg2, out TResult result) { return TryGetSync(syncRoot, timeout, false, () => func(arg1, arg2), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, TResult>(object syncRoot, bool requireSync, Func<T1, T2, TResult> func, T1 arg1, T2 arg2, out TResult result) { return TryGetSync(syncRoot, requireSync, () => func(arg1, arg2), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T1, T2, TResult>(object syncRoot, Func<T1, T2, TResult> func, T1 arg1, T2 arg2, out TResult result) { return TryGetSync(syncRoot, false, () => func(arg1, arg2), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T">The type of parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg">The parameter to pass to the delegate method.</typepparamaram>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T, TResult>(object syncRoot, int millisecondsTimeout, bool requireSync, Func<T, TResult> func, T arg, out TResult result) { return TryGetSync(syncRoot, millisecondsTimeout, requireSync, () => func(arg), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T">The type of parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg">The parameter to pass to the delegate method.</typepparamaram>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T, TResult>(object syncRoot, TimeSpan timeout, bool requireSync, Func<T, TResult> func, T arg, out TResult result) { return TryGetSync(syncRoot, timeout, requireSync, () => func(arg), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T">The type of parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg">The parameter to pass to the delegate method.</typepparamaram>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T, TResult>(object syncRoot, int millisecondsTimeout, Func<T, TResult> func, T arg, out TResult result) { return TryGetSync(syncRoot, millisecondsTimeout, false, () => func(arg), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T">The type of parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg">The parameter to pass to the delegate method.</typepparamaram>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T, TResult>(object syncRoot, bool requireSync, Func<T, TResult> func, T arg, out TResult result) { return TryGetSync(syncRoot, requireSync, () => func(arg), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T">The type of parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg">The parameter to pass to the delegate method.</typepparamaram>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T, TResult>(object syncRoot, TimeSpan timeout, Func<T, TResult> func, T arg, out TResult result) { return TryGetSync(syncRoot, timeout, false, () => func(arg), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T">The type of parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <param name="arg">The parameter to pass to the delegate method.</typepparamaram>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<T, TResult>(object syncRoot, Func<T, TResult> func, T arg, out TResult result) { return TryGetSync(syncRoot, false, () => func(arg), out result); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<TResult>(object syncRoot, int millisecondsTimeout, bool requireSync, Func<TResult> func, out TResult result)
        {
            if (syncRoot != null)
            {
                if (Monitor.TryEnter(syncRoot, millisecondsTimeout))
                {
                    try { result = func(); } finally { Monitor.Exit(syncRoot); }
                    return true;
                }
            }
            else if (!requireSync)
            {
                result = func();
                return true;
            }
            result = default(TResult);
            return false;
        }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<TResult>(object syncRoot, TimeSpan timeout, bool requireSync, Func<TResult> func, out TResult result)
        {
            if (syncRoot != null)
            {
                if (Monitor.TryEnter(syncRoot, timeout))
                {
                    try { result = func(); } finally { Monitor.Exit(syncRoot); }
                    return true;
                }
            }
            else if (!requireSync)
            {
                result = func();
                return true;
            }
            result = default(TResult);
            return false;
        }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<TResult>(object syncRoot, bool requireSync, Func<TResult> func, out TResult result)
        {
            if (syncRoot != null)
            {
                if (Monitor.TryEnter(syncRoot))
                {
                    try { result = func(); } finally { Monitor.Exit(syncRoot); }
                    return true;
                }
            }
            else if (!requireSync)
            {
                result = func();
                return true;
            }
            result = default(TResult);
            return false;
        }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method to return a value while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="TResult">The type of value returned by the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="func">The delegate method to invoke.</param>
        /// <returns><c>true</c> if <paramref name="func" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="func"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryGetSync<TResult>(object syncRoot, Func<TResult> func, out TResult result)
        {
            if (syncRoot == null)
            {
                result = func();
                return true;
            }
            if (Monitor.TryEnter(syncRoot))
            {
                try { result = func(); } finally { Monitor.Exit(syncRoot); }
                return true;
            }

            result = default(TResult);
            return false;
        }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T16">The type of the sixteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <param name="arg16">The sixteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(object syncRoot, int millisecondsTimeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) { return TryInvokeSync(syncRoot, millisecondsTimeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T16">The type of the sixteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <param name="arg16">The sixteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(object syncRoot, TimeSpan timeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) { return TryInvokeSync(syncRoot, timeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T16">The type of the sixteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <param name="arg16">The sixteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(object syncRoot, int millisecondsTimeout, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) { return TryInvokeSync(syncRoot, millisecondsTimeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T16">The type of the sixteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <param name="arg16">The sixteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(object syncRoot, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) { return TryInvokeSync(syncRoot, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T16">The type of the sixteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <param name="arg16">The sixteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(object syncRoot, TimeSpan timeout, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) { return TryInvokeSync(syncRoot, timeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T16">The type of the sixteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <param name="arg16">The sixteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(object syncRoot, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) { return TryInvokeSync(syncRoot, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(object syncRoot, int millisecondsTimeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) { return TryInvokeSync(syncRoot, millisecondsTimeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(object syncRoot, TimeSpan timeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) { return TryInvokeSync(syncRoot, timeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(object syncRoot, int millisecondsTimeout, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) { return TryInvokeSync(syncRoot, millisecondsTimeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(object syncRoot, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) { return TryInvokeSync(syncRoot, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(object syncRoot, TimeSpan timeout, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) { return TryInvokeSync(syncRoot, timeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T15">The type of the fiftheenth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <param name="arg15">The fiftheenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(object syncRoot, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) { return TryInvokeSync(syncRoot, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(object syncRoot, int millisecondsTimeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) { return TryInvokeSync(syncRoot, millisecondsTimeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(object syncRoot, TimeSpan timeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) { return TryInvokeSync(syncRoot, timeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(object syncRoot, int millisecondsTimeout, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) { return TryInvokeSync(syncRoot, millisecondsTimeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(object syncRoot, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) { return TryInvokeSync(syncRoot, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(object syncRoot, TimeSpan timeout, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) { return TryInvokeSync(syncRoot, timeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T14">The type of the fourteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <param name="arg14">The fourteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(object syncRoot, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) { return TryInvokeSync(syncRoot, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(object syncRoot, int millisecondsTimeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) { return TryInvokeSync(syncRoot, millisecondsTimeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(object syncRoot, TimeSpan timeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) { return TryInvokeSync(syncRoot, timeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(object syncRoot, int millisecondsTimeout, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) { return TryInvokeSync(syncRoot, millisecondsTimeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(object syncRoot, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) { return TryInvokeSync(syncRoot, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(object syncRoot, TimeSpan timeout, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) { return TryInvokeSync(syncRoot, timeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T13">The type of the thirteenth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <param name="arg13">The thirteenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(object syncRoot, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) { return TryInvokeSync(syncRoot, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(object syncRoot, int millisecondsTimeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) { return TryInvokeSync(syncRoot, millisecondsTimeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(object syncRoot, TimeSpan timeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) { return TryInvokeSync(syncRoot, timeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(object syncRoot, int millisecondsTimeout, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) { return TryInvokeSync(syncRoot, millisecondsTimeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(object syncRoot, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) { return TryInvokeSync(syncRoot, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(object syncRoot, TimeSpan timeout, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) { return TryInvokeSync(syncRoot, timeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T12">The type of the twelvth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <param name="arg12">The twelvth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(object syncRoot, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) { return TryInvokeSync(syncRoot, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(object syncRoot, int millisecondsTimeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) { return TryInvokeSync(syncRoot, millisecondsTimeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(object syncRoot, TimeSpan timeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) { return TryInvokeSync(syncRoot, timeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(object syncRoot, int millisecondsTimeout, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) { return TryInvokeSync(syncRoot, millisecondsTimeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(object syncRoot, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) { return TryInvokeSync(syncRoot, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(object syncRoot, TimeSpan timeout, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) { return TryInvokeSync(syncRoot, timeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T11">The type of the eleventh parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <param name="arg11">The eleventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(object syncRoot, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) { return TryInvokeSync(syncRoot, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(object syncRoot, int millisecondsTimeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) { return TryInvokeSync(syncRoot, millisecondsTimeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(object syncRoot, TimeSpan timeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) { return TryInvokeSync(syncRoot, timeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(object syncRoot, int millisecondsTimeout, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) { return TryInvokeSync(syncRoot, millisecondsTimeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(object syncRoot, TimeSpan timeout, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) { return TryInvokeSync(syncRoot, timeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(object syncRoot, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) { return TryInvokeSync(syncRoot, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T10">The type of the tenth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <param name="arg10">The tenth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(object syncRoot, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) { return TryInvokeSync(syncRoot, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9>(object syncRoot, int millisecondsTimeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) { return TryInvokeSync(syncRoot, millisecondsTimeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9>(object syncRoot, TimeSpan timeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) { return TryInvokeSync(syncRoot, timeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9>(object syncRoot, int millisecondsTimeout, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) { return TryInvokeSync(syncRoot, millisecondsTimeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9>(object syncRoot, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) { return TryInvokeSync(syncRoot, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9>(object syncRoot, TimeSpan timeout, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) { return TryInvokeSync(syncRoot, timeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T9">The type of the ninth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <param name="arg9">The ninth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8, T9>(object syncRoot, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) { return TryInvokeSync(syncRoot, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8>(object syncRoot, int millisecondsTimeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) { return TryInvokeSync(syncRoot, millisecondsTimeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8>(object syncRoot, TimeSpan timeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) { return TryInvokeSync(syncRoot, timeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8>(object syncRoot, int millisecondsTimeout, Action<T1, T2, T3, T4, T5, T6, T7, T8> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) { return TryInvokeSync(syncRoot, millisecondsTimeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8>(object syncRoot, TimeSpan timeout, Action<T1, T2, T3, T4, T5, T6, T7, T8> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) { return TryInvokeSync(syncRoot, timeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8>(object syncRoot, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7, T8> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) { return TryInvokeSync(syncRoot, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T8">The type of the eighth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <param name="arg8">The eighth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7, T8>(object syncRoot, Action<T1, T2, T3, T4, T5, T6, T7, T8> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) { return TryInvokeSync(syncRoot, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7>(object syncRoot, int millisecondsTimeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) { return TryInvokeSync(syncRoot, millisecondsTimeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7>(object syncRoot, TimeSpan timeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) { return TryInvokeSync(syncRoot, timeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7>(object syncRoot, int millisecondsTimeout, Action<T1, T2, T3, T4, T5, T6, T7> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) { return TryInvokeSync(syncRoot, millisecondsTimeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7>(object syncRoot, TimeSpan timeout, Action<T1, T2, T3, T4, T5, T6, T7> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) { return TryInvokeSync(syncRoot, timeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7>(object syncRoot, bool requireSync, Action<T1, T2, T3, T4, T5, T6, T7> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) { return TryInvokeSync(syncRoot, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T7">The type of the seventh parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <param name="arg7">The seventh parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6, T7>(object syncRoot, Action<T1, T2, T3, T4, T5, T6, T7> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) { return TryInvokeSync(syncRoot, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6, arg7)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6>(object syncRoot, int millisecondsTimeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) { return TryInvokeSync(syncRoot, millisecondsTimeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6>(object syncRoot, TimeSpan timeout, bool requireSync, Action<T1, T2, T3, T4, T5, T6> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) { return TryInvokeSync(syncRoot, timeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6>(object syncRoot, int millisecondsTimeout, Action<T1, T2, T3, T4, T5, T6> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) { return TryInvokeSync(syncRoot, millisecondsTimeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6>(object syncRoot, TimeSpan timeout, Action<T1, T2, T3, T4, T5, T6> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) { return TryInvokeSync(syncRoot, timeout, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6>(object syncRoot, bool requireSync, Action<T1, T2, T3, T4, T5, T6> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) { return TryInvokeSync(syncRoot, requireSync, () => action(arg1, arg2, arg3, arg4, arg5, arg6)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T6">The type of the sixth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <param name="arg6">The sixth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5, T6>(object syncRoot, Action<T1, T2, T3, T4, T5, T6> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) { return TryInvokeSync(syncRoot, false, () => action(arg1, arg2, arg3, arg4, arg5, arg6)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5>(object syncRoot, int millisecondsTimeout, bool requireSync, Action<T1, T2, T3, T4, T5> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) { return TryInvokeSync(syncRoot, millisecondsTimeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5>(object syncRoot, TimeSpan timeout, bool requireSync, Action<T1, T2, T3, T4, T5> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) { return TryInvokeSync(syncRoot, timeout, requireSync, () => action(arg1, arg2, arg3, arg4, arg5)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5>(object syncRoot, int millisecondsTimeout, Action<T1, T2, T3, T4, T5> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) { return TryInvokeSync(syncRoot, millisecondsTimeout, false, () => action(arg1, arg2, arg3, arg4, arg5)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5>(object syncRoot, bool requireSync, Action<T1, T2, T3, T4, T5> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) { return TryInvokeSync(syncRoot, requireSync, () => action(arg1, arg2, arg3, arg4, arg5)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5>(object syncRoot, TimeSpan timeout, Action<T1, T2, T3, T4, T5> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) { return TryInvokeSync(syncRoot, timeout, false, () => action(arg1, arg2, arg3, arg4, arg5)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T5">The type of the fifth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <param name="arg5">The fifth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4, T5>(object syncRoot, Action<T1, T2, T3, T4, T5> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) { return TryInvokeSync(syncRoot, false, () => action(arg1, arg2, arg3, arg4, arg5)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4>(object syncRoot, int millisecondsTimeout, bool requireSync, Action<T1, T2, T3, T4> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4) { return TryInvokeSync(syncRoot, millisecondsTimeout, requireSync, () => action(arg1, arg2, arg3, arg4)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4>(object syncRoot, TimeSpan timeout, bool requireSync, Action<T1, T2, T3, T4> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4) { return TryInvokeSync(syncRoot, timeout, requireSync, () => action(arg1, arg2, arg3, arg4)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4>(object syncRoot, int millisecondsTimeout, Action<T1, T2, T3, T4> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4) { return TryInvokeSync(syncRoot, millisecondsTimeout, false, () => action(arg1, arg2, arg3, arg4)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4>(object syncRoot, TimeSpan timeout, Action<T1, T2, T3, T4> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4) { return TryInvokeSync(syncRoot, timeout, false, () => action(arg1, arg2, arg3, arg4)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4>(object syncRoot, bool requireSync, Action<T1, T2, T3, T4> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4) { return TryInvokeSync(syncRoot, requireSync, () => action(arg1, arg2, arg3, arg4)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T4">The type of the fourth parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <param name="arg4">The fourth parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3, T4>(object syncRoot, Action<T1, T2, T3, T4> action, T1 arg1, T2 arg2, T3 arg3, T4 arg4) { return TryInvokeSync(syncRoot, false, () => action(arg1, arg2, arg3, arg4)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3>(object syncRoot, int millisecondsTimeout, bool requireSync, Action<T1, T2, T3> action, T1 arg1, T2 arg2, T3 arg3) { return TryInvokeSync(syncRoot, millisecondsTimeout, requireSync, () => action(arg1, arg2, arg3)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3>(object syncRoot, TimeSpan timeout, bool requireSync, Action<T1, T2, T3> action, T1 arg1, T2 arg2, T3 arg3) { return TryInvokeSync(syncRoot, timeout, requireSync, () => action(arg1, arg2, arg3)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3>(object syncRoot, int millisecondsTimeout, Action<T1, T2, T3> action, T1 arg1, T2 arg2, T3 arg3) { return TryInvokeSync(syncRoot, millisecondsTimeout, false, () => action(arg1, arg2, arg3)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3>(object syncRoot, bool requireSync, Action<T1, T2, T3> action, T1 arg1, T2 arg2, T3 arg3) { return TryInvokeSync(syncRoot, requireSync, () => action(arg1, arg2, arg3)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3>(object syncRoot, TimeSpan timeout, Action<T1, T2, T3> action, T1 arg1, T2 arg2, T3 arg3) { return TryInvokeSync(syncRoot, timeout, false, () => action(arg1, arg2, arg3)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T3">The type of the third parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <param name="arg3">The third parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2, T3>(object syncRoot, Action<T1, T2, T3> action, T1 arg1, T2 arg2, T3 arg3) { return TryInvokeSync(syncRoot, false, () => action(arg1, arg2, arg3)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2>(object syncRoot, int millisecondsTimeout, bool requireSync, Action<T1, T2> action, T1 arg1, T2 arg2) { return TryInvokeSync(syncRoot, millisecondsTimeout, requireSync, () => action(arg1, arg2)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2>(object syncRoot, TimeSpan timeout, bool requireSync, Action<T1, T2> action, T1 arg1, T2 arg2) { return TryInvokeSync(syncRoot, timeout, requireSync, () => action(arg1, arg2)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2>(object syncRoot, int millisecondsTimeout, Action<T1, T2> action, T1 arg1, T2 arg2) { return TryInvokeSync(syncRoot, millisecondsTimeout, false, () => action(arg1, arg2)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2>(object syncRoot, TimeSpan timeout, Action<T1, T2> action, T1 arg1, T2 arg2) { return TryInvokeSync(syncRoot, timeout, false, () => action(arg1, arg2)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2>(object syncRoot, bool requireSync, Action<T1, T2> action, T1 arg1, T2 arg2) { return TryInvokeSync(syncRoot, requireSync, () => action(arg1, arg2)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T1">The type of the first parameter to pass to the delegate method.</typeparam>
        /// <typeparam name="T2">The type of the second parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg1">The first parameter to pass to the delegate method.</param>
        /// <param name="arg2">The second parameter to pass to the delegate method.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T1, T2>(object syncRoot, Action<T1, T2> action, T1 arg1, T2 arg2) { return TryInvokeSync(syncRoot, false, () => action(arg1, arg2)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T">The type of parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg">The parameter to pass to the delegate method.</typepparamaram>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T>(object syncRoot, int millisecondsTimeout, bool requireSync, Action<T> action, T arg) { return TryInvokeSync(syncRoot, millisecondsTimeout, requireSync, () => action(arg)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T">The type of parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg">The parameter to pass to the delegate method.</typepparamaram>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T>(object syncRoot, TimeSpan timeout, bool requireSync, Action<T> action, T arg) { return TryInvokeSync(syncRoot, timeout, requireSync, () => action(arg)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T">The type of parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg">The parameter to pass to the delegate method.</typepparamaram>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T>(object syncRoot, int millisecondsTimeout, Action<T> action, T arg) { return TryInvokeSync(syncRoot, millisecondsTimeout, false, () => action(arg)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T">The type of parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg">The parameter to pass to the delegate method.</typepparamaram>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T>(object syncRoot, bool requireSync, Action<T> action, T arg) { return TryInvokeSync(syncRoot, requireSync, () => action(arg)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T">The type of parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg">The parameter to pass to the delegate method.</typepparamaram>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T>(object syncRoot, TimeSpan timeout, Action<T> action, T arg) { return TryInvokeSync(syncRoot, timeout, false, () => action(arg)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <typeparam name="T">The type of parameter to pass to the delegate method.</typeparam>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <param name="arg">The parameter to pass to the delegate method.</typepparamaram>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync<T>(object syncRoot, Action<T> action, T arg) { return TryInvokeSync(syncRoot, false, () => action(arg)); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync(object syncRoot, int millisecondsTimeout, bool requireSync, Action action)
        {
            if (syncRoot != null)
            {
                if (Monitor.TryEnter(syncRoot, millisecondsTimeout))
                {
                    try { action(); } finally { Monitor.Exit(syncRoot); }
                    return true;
                }
            }
            else if (!requireSync)
            {
                action();
                return true;
            }
            return false;
        }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync(object syncRoot, TimeSpan timeout, bool requireSync, Action action)
        {
            if (syncRoot != null)
            {
                if (Monitor.TryEnter(syncRoot, timeout))
                {
                    try { action(); } finally { Monitor.Exit(syncRoot); }
                    return true;
                }
            }
            else if (!requireSync)
            {
                action();
                return true;
            }
            return false;
        }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="millisecondsTimeout">The number of milliseconds to wait to obtain the exclusive lock or <c>-1</c> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync(object syncRoot, int millisecondsTimeout, Action action) { return TryInvokeSync(syncRoot, millisecondsTimeout, false, action); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="timeout">The <seealso cref="TimeSpan"/> to wait to obtain the exclusive lock or <seealso cref="TimeSpan.Infinity"/> to wait indefinitely.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync(object syncRoot, TimeSpan timeout, Action action) { return TryInvokeSync(syncRoot, timeout, false, action); }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="requireSync">Requires that the target <seealso cref="ICollection" /> is synchronized.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null and <paramref name="requireSync"/> is <c>true</c>, then <paramref name="func"/> will not be invoked, and this will return <c>false</c>; otherwise, <paramref name="func"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync(object syncRoot, bool requireSync, Action action)
        {
            if (syncRoot != null)
            {
                if (Monitor.TryEnter(syncRoot))
                {
                    try { action(); } finally { Monitor.Exit(syncRoot); }
                    return true;
                }
            }
            else if (!requireSync)
            {
                action();
                return true;
            }
            return false;
        }
        /// <summary>
        /// Attempts to obtain an exclusive lock on the target collection and invokes a delegate method while holding an exclusive lock on the specified object.
        /// </summary>
        /// <param name="syncRoot">The <seealso cref="ICollection"/> on which to obtain an exclusive lock.</param>
        /// <param name="action">The delegate method to invoke.</param>
        /// <returns><c>true</c> if <paramref name="action" /> was invoked; otherwise, false.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="action"/> is null.</exception>
        /// <remarks>If <paramref name="syncRoot"/> is null, <paramref name="action"/> is invoked without obtaining a lock.</remarks>
        public static bool TryInvokeSync(object syncRoot, Action action) { return TryInvokeSync(syncRoot, false, action); }
    }
}
